name: Deployment for App 1 - ECS (EC2) Nginx App

on:
  push:
    paths:
      - "1.ecs-ec2-nginx"

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 542979624611.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Run Tests
        run: echo "Running tests ..."

  push:
    needs: [test]
    name: Build/Push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "[Flask] Login, Tag and Push Docker image"
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          docker build -t ${{ env.ECR_REGISTRY }}/app-1-flask-image:${{ env.IMAGE_TAG }} flask/app
          docker push ${{ env.ECR_REGISTRY }}/app-1-flask-image:${{ env.IMAGE_TAG }}

      - name: "[Nginx] Login, Tag and Push Docker image"
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          docker build -t ${{ env.ECR_REGISTRY }}/app-1-nginx-image:${{ env.IMAGE_TAG }} nginx/app
          docker push ${{ env.ECR_REGISTRY }}/app-1-nginx-image:${{ env.IMAGE_TAG }}

  deploy:
    name: "Terraform deploy"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .1.ecs-ec2-nginx/infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check if triggered by main branch
        id: check_branch
        run: |
          if [[ "${{ github.event.workflow_run.head_branch }}" != "main" ]]; then
            echo "This workflow was not triggered by the main branch. Exiting."
            exit 1
          fi

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run terraform apply script on DEV components
        run: |
          terraform init
          terraform apply --auto-approve

  notify:
    needs: [test, push, deploy]
    name: Notify via Slack
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Send notifications
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: <your-slack-channel-id>
          slack-message: "App 1 - Deployment Stats"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
